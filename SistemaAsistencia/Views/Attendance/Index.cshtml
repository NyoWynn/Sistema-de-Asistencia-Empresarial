@{
    ViewData["Title"] = "Registro de Asistencia";
}

<div class="text-center mb-4">
    <h1 class="display-4 text-gradient mb-3">Bienvenido, @Context.Session.GetString("UserName")</h1>
    <p class="lead text-muted">Utilice los botones para registrar su jornada laboral</p>
</div>

<!-- Reloj Elegante -->
<div class="row justify-content-center mb-5">
    <div class="col-md-8 col-lg-6">
        <div class="modern-card">
            <div class="card-body text-center p-4">
                <div class="clock-container">
                    <div class="clock-time" id="currentTime">--:--:--</div>
                    <div class="clock-date" id="currentDate">-- -- ----</div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Botones de Asistencia -->
<div class="d-flex justify-content-center gap-4 mt-4">
    @if (ViewBag.AttendanceStatus == "CanClockIn" || ViewBag.AttendanceStatus == "CanClockOut")
    {
        <!-- Botón de Entrada -->
        <button type="button" id="clockInBtn" 
                class="btn btn-success btn-lg px-4 py-3 attendance-btn @(ViewBag.AttendanceStatus == "CanClockIn" ? "" : "disabled")"
                @(ViewBag.AttendanceStatus == "CanClockOut" ? "disabled" : "")>
            <i class="fas fa-sign-in-alt me-2"></i>
            Marcar Entrada
        </button>

        <!-- Botón de Salida -->
        <button type="button" id="clockOutBtn" 
                class="btn btn-danger btn-lg px-4 py-3 attendance-btn @(ViewBag.AttendanceStatus == "CanClockOut" ? "" : "disabled")"
                @(ViewBag.AttendanceStatus == "CanClockIn" ? "disabled" : "")>
            <i class="fas fa-sign-out-alt me-2"></i>
            Marcar Salida
        </button>
    }
    else if (ViewBag.AttendanceStatus == "CompletedDay")
    {
        <div class="alert alert-success text-center col-md-8">
            <h4><i class="fas fa-check-circle me-2"></i>Jornada laboral finalizada por hoy.</h4>
            <p class="mb-0">Gracias por tu trabajo. ¡Hasta mañana!</p>
        </div>
    }
</div>

<!-- Formulario oculto para envío -->
<form id="attendanceForm" asp-action="MarkAttendance" method="post" style="display: none;">
    @Html.AntiForgeryToken()
    <input type="hidden" name="recordType" id="recordTypeInput" />
    <input type="hidden" name="latitude" id="latitudeInput" />
    <input type="hidden" name="longitude" id="longitudeInput" />
</form>

@if (TempData["Message"] != null)
{
    <div class="alert alert-info mt-4">@TempData["Message"]</div>
}
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger mt-4">@TempData["Error"]</div>
}

<!-- Información sobre comprobantes por email -->
<div class="row mt-4">
    <div class="col-12">
        <div class="card border-info">
            <div class="card-body text-center">
                <h5 class="card-title text-info">
                    <i class="fas fa-envelope me-2"></i>
                    Comprobantes por Email
                </h5>
                <p class="card-text mb-0">
                    Cada vez que marques entrada o salida, recibirás un comprobante automático en tu correo electrónico con todos los detalles del registro.
                </p>
                <small class="text-muted">
                    <i class="fas fa-info-circle me-1"></i>
                    Asegúrate de que tu email esté actualizado en tu perfil
                </small>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .clock-container {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 20px;
            padding: 2.5rem;
            color: white;
            box-shadow: 0 15px 40px rgba(102, 126, 234, 0.3);
            position: relative;
            overflow: hidden;
        }
        
        .clock-container::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            animation: rotate 20s linear infinite;
        }
        
        @@keyframes rotate {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .clock-time {
            font-size: 3.5rem;
            font-weight: bold;
            font-family: 'Inter', 'Courier New', monospace;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            margin-bottom: 0.5rem;
            position: relative;
            z-index: 2;
        }
        
        .clock-date {
            font-size: 1.3rem;
            font-weight: 500;
            opacity: 0.9;
            position: relative;
            z-index: 2;
        }
        
        .attendance-btn {
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
            min-width: 200px;
        }
        
        .attendance-btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.3);
        }
        
        .attendance-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .attendance-btn i {
            font-size: 1.2em;
        }
    </style>
    
    <script>
        function updateClock() {
            const now = new Date();
            
            // Formatear hora
            const timeString = now.toLocaleTimeString('es-ES', {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                hour12: false
            });
            
            // Formatear fecha
            const dateString = now.toLocaleDateString('es-ES', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            
            document.getElementById('currentTime').textContent = timeString;
            document.getElementById('currentDate').textContent = dateString;
        }
        
        // Actualizar el reloj inmediatamente y luego cada segundo
        updateClock();
        setInterval(updateClock, 1000);

        // Funcionalidad GPS para asistencia
        document.addEventListener('DOMContentLoaded', function() {
            const clockInBtn = document.getElementById('clockInBtn');
            const clockOutBtn = document.getElementById('clockOutBtn');
            const attendanceForm = document.getElementById('attendanceForm');
            const recordTypeInput = document.getElementById('recordTypeInput');
            const latitudeInput = document.getElementById('latitudeInput');
            const longitudeInput = document.getElementById('longitudeInput');

            function getCurrentLocation() {
                return new Promise((resolve, reject) => {
                    if (!navigator.geolocation) {
                        reject(new Error('Geolocalización no es soportada por este navegador.'));
                        return;
                    }

                    navigator.geolocation.getCurrentPosition(
                        position => {
                            resolve({
                                latitude: position.coords.latitude,
                                longitude: position.coords.longitude
                            });
                        },
                        error => {
                            let errorMessage = 'Error al obtener la ubicación: ';
                            switch(error.code) {
                                case error.PERMISSION_DENIED:
                                    errorMessage += 'Permiso denegado por el usuario.';
                                    break;
                                case error.POSITION_UNAVAILABLE:
                                    errorMessage += 'Información de ubicación no disponible.';
                                    break;
                                case error.TIMEOUT:
                                    errorMessage += 'Tiempo de espera agotado.';
                                    break;
                                default:
                                    errorMessage += 'Error desconocido.';
                                    break;
                            }
                            reject(new Error(errorMessage));
                        },
                        {
                            enableHighAccuracy: true,
                            timeout: 10000,
                            maximumAge: 60000
                        }
                    );
                });
            }

            function showLocationStatus(message, type = 'info') {
                // Remover alertas existentes
                const existingAlert = document.querySelector('.location-alert');
                if (existingAlert) {
                    existingAlert.remove();
                }

                // Crear nueva alerta
                const alertDiv = document.createElement('div');
                alertDiv.className = `alert alert-${type} location-alert mt-3`;
                alertDiv.innerHTML = `
                    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'danger' ? 'exclamation-triangle' : 'info-circle'} me-2"></i>
                    ${message}
                `;

                // Insertar después de los botones
                const buttonsContainer = document.querySelector('.d-flex.justify-content-center.gap-4.mt-4');
                buttonsContainer.parentNode.insertBefore(alertDiv, buttonsContainer.nextSibling);
            }

            function handleAttendanceClick(recordType) {
                const button = recordType === 'Entrada' ? clockInBtn : clockOutBtn;
                const originalText = button.innerHTML;
                
                // Deshabilitar botón silenciosamente
                button.disabled = true;
                button.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Procesando...';

                getCurrentLocation()
                    .then(location => {
                        // Configurar formulario y enviar inmediatamente
                        recordTypeInput.value = recordType;
                        latitudeInput.value = location.latitude;
                        longitudeInput.value = location.longitude;
                        
                        // Enviar formulario sin mostrar mensajes
                        attendanceForm.submit();
                    })
                    .catch(error => {
                        // Restaurar botón y mostrar error solo si es necesario
                        button.disabled = false;
                        button.innerHTML = originalText;
                        showLocationStatus(error.message, 'danger');
                    });
            }

            // Event listeners
            if (clockInBtn) {
                clockInBtn.addEventListener('click', () => handleAttendanceClick('Entrada'));
            }

            if (clockOutBtn) {
                clockOutBtn.addEventListener('click', () => handleAttendanceClick('Salida'));
            }
        });
    </script>
}